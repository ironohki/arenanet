# ArenaNet Web Programmer Take-Home Exercise

Completed by Jeremy Kayes, Monday, Dec 11, 2023. 

## Notes

I have completed the exercises using TypeScript. If desired, the TS can be compiled to javascript with the command `npm run build`.

I have included unit tests written with Jest for exercises #1, #2, #3, and #6. These can be executed with the command `npm run test`. My intent was to write tests that covered the challenges as stated, 

For most JavaScript/TypeScript exercises, I favored to return a testable value instead of console.log output. 

For Exercise #1, I used returning "-1" to indicate invalid input. There are more valid or robust solutions, but I decided this would be appropriate for the scope of the exercise. 

For Exercise #2, I took some liberty with the text output. For example, I used the characters ">" and "|" to indicate whether the operation should continue or exit. This made it possible to run different test cases very specifically. 

For Exercise #2, I deviated from the exercise notes by creating 4 distinct functions. This enabled me to display additional successful test cases. 

For exercizes #4 and #5, I have included all the relevent code in a single HTML file, including JS and CSS. 

For exercise #5, I included inline comments in the HTML file for each specific improvement I applied to the code provided. 

For exercise #5, I found that the external links were broken. I have made the following assumptions regarding the external links, and the solutions I provided were based on these assumptions. 
- The JavaScript code would be initialized with the command `DynamicContent.InvokeUpdate()`
- The JavaScript code would populate content into the element who's ID is provided as a property. 
- The four image files denoted by "tl", "tr", "bl" and "br" are intended to apply a graphical effect to the four corners of the content div.

Exercise #6 was entertaining, as working in TypeScript enables you to define an interface that data must match. To complete the spirit of the exercise while also demonstrating interface use, I created a schema matching system that is defined by TypeScript interfaces. 